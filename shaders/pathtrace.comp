#version 450 core
#pragma debug(on)
#pragma optimize(off)

layout(local_size_x = 32, local_size_y = 32) in;

struct Material {
    vec4 ambient;
    vec4 diffuse;
    vec4 specular;
    vec4 transmittance;
    vec4 emission;
    float shininess;
    float ior;
    float opacity;
};

struct HitInfo{
    vec3 p;
    vec3 n;
    float t;
    float t1;
    float u;
    float v;
    float tid;
    vec4 mat;
};

struct Sphere{
    vec3 center;
    vec4 mat;
    float radius;
};

struct Plane{
    vec3 n;
	vec4 mat;
	float d;
};

struct Triangle{
    vec3 v0, v1, v2;
    Material material;
    float tid;
};

struct Ray { vec3 origin, dir;} eyeRay;
struct Box { vec3 min, max; };
struct Camera{
	vec3 U, V, W;
	float d;
} cam;

layout(std430, binding=0) buffer TRIANGLES_SSBO{
    Triangle triangles[38];
};

layout(std430, binding=1) buffer PLANE_SSBO{
    Plane planes[5];
};

layout(std430, binding=2) buffer SPHERE_SSBO{
    Sphere spheres[1];
};


uniform mat4 invMVP;
uniform vec4 bgColor;
uniform vec3 eyes;
uniform vec3 lightPos;
uniform Box aabb;
uniform float NO_OF_TRIANGLES;
uniform float NO_OF_VERTICES;

layout(rgba32f, binding=0) uniform image2D scene_img;
layout(binding=1) uniform samplerBuffer vertices_tbo;
layout(binding=2) uniform isamplerBuffer triangle_tbo;
layout(binding=3) uniform sampler2DArray textureMap;

const float k0 = 1.0;
const float k1 = 0.0;
const float k2 = 0.0;
const float EPSILON = 0.000001;

HitInfo newHitInfo(float t){
    HitInfo info;
    info.t = t;
    info.t = info.u = info.v = 0;
    return info;
}

HitInfo newHitInfo(float t, float u, float v, float tid, vec3 n, vec3 o, vec3 d){
    HitInfo info;
    info.t = t;
    info.u = u;
    info.v = v;
    info.tid = tid;
    info.n = n;
    info.p =  o + t * d;
    return info;
}

const HitInfo NO_HIT = newHitInfo(-1);

vec2 getUV(){
	vec2 uv = vec2(gl_GlobalInvocationID.xy)/(vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy) - vec2(1));
	return 2 * uv - vec2(1);	// scale from [0, 1] to [-1, -1]
}

void swap(inout float a, inout float b){
	float temp = a;
	a = b;
	b = temp;
}

void swap(inout vec3 a, inout vec3 b){
	vec3 temp = a;
	a = b;
	b = temp;
}


HitInfo intersectPlane(Ray ray, Plane p){
    HitInfo hit;
	hit.t = -1;
	vec3 o = ray.origin;
	vec3 d = ray.dir;
	float t = (p.d - dot(p.n, o)) / dot(p.n, d);
	if(t < 0) return NO_HIT;
	hit.p = o + t * d;
	hit.n = p.n;
	hit.t = t;
	hit.mat = p.mat;
	return hit;
}

HitInfo intersectSphere(Ray ray, Sphere s){
    vec3 m = ray.origin - s.center;
    float b = dot(m, ray.dir);
    float c = dot(m, m) - s.radius * s.radius;

    if(c > 0.0f && b > 0.0f) return NO_HIT;

    float discr = b*b - c;

    if(discr < 0.0f) return NO_HIT;

    float t = -b - sqrt(discr);
    float t1 = t + 2 * b;
   // if(t < 0.0f) t = 0.0f;   // ray started inside sphere*/

    HitInfo hit;
    hit.t = t;
    hit.t1 = 255;
    hit.p = ray.origin + t * ray.dir;
    hit.n = normalize(hit.p - s.center);
    hit.mat = s.mat;
    return hit;
}

vec2 intersectCube(vec3 origin, vec3 ray, Box cube) {
	vec3   tMin = (cube.min - origin) / ray;
	vec3   tMax = (cube.max - origin) / ray;
	vec3     t1 = min(tMin, tMax);
	vec3     t2 = max(tMin, tMax);
	float tNear = max(max(t1.x, t1.y), t1.z);
	float  tFar = min(min(t2.x, t2.y), t2.z);
	return vec2(tNear, tFar);
}

vec3 get_direction(vec2 p, Camera c) {
   return normalize(p.x * c.U + p.y * c.V + c.d * c.W);
}

void setup_camera(vec2 uv) {

  eyeRay.origin = eyes;

  cam.U = (invMVP*vec4(1,0,0,0)).xyz;
  cam.V = (invMVP*vec4(0,1,0,0)).xyz;
  cam.W = (invMVP*vec4(0,0,1,0)).xyz;
  cam.d = 1;

  eyeRay.dir = get_direction(uv , cam);
  eyeRay.dir += cam.U*uv.x;
  eyeRay.dir += cam.V*uv.y;
}


HitInfo intersectTriangle(vec3 origin, vec3 dir, int index ) {
    Triangle tri = triangles[index];
    vec3 v0 = tri.v2;
    vec3 v1 = tri.v1;
    vec3 v2 = tri.v0;

	if((index+1) % 2 !=0 ){
	    v0 = tri.v1;
        v1 = tri.v0;
        v2 = tri.v2;
	}

	vec3 e1 = v1-v0;
	vec3 e2 = v2-v0;
	vec3 tvec = origin - v0;

	vec3 pvec = cross(dir, e2);
	float  det  = dot(e1, pvec);

	float inv_det = 1.0/ det;

	float u = dot(tvec, pvec) * inv_det;

	if (u < 0.0 || u > 1.0)
		return NO_HIT;

	vec3 qvec = cross(tvec, e1);

	float v = dot(dir, qvec) * inv_det;

	if (v < 0.0 || (u + v) > 1.0)
		return NO_HIT;

	float t = dot(e2, qvec) * inv_det;
	if((index+1) % 2 ==0 ) {
		v = 1-v; 
	} else {
		u = 1-u;
	} 

	return newHitInfo(t, u, v, tri.tid, normalize(cross(e2,e1)), origin, dir);
}

float shadow(vec3 origin, vec3 dir ) {
	for(int i=0;i<int(NO_OF_TRIANGLES);i++)
	{
		HitInfo res = intersectTriangle(origin, dir, i);
		if(res.t>0 ) {
		   return 0.5;
		}
	}
	return 1.0;
}

bool closestIntersectingTriangle(Ray ray, inout HitInfo hit){
    float t = hit.t;
    for(int i=0;i<int(NO_OF_TRIANGLES);i++)
    {
        HitInfo res = intersectTriangle(ray.origin, ray.dir, i);
        if(res.t>0 && res.t <= hit.t) {
           hit = res;

        }
    }
    return hit.t < t;
}

bool closestIntersectingPlane(Ray ray, inout HitInfo hit){
    float t = hit.t;
    for(int i = 0; i < 5; i++){
        HitInfo res = intersectPlane(ray, planes[i]);
       if(res.t>0 && res.t <= hit.t) {
          hit = res;

       }
    }
    return hit.t < t;
}

bool closestIntersectingSphere(Ray ray, inout HitInfo hit){
    float t = hit.t;

    for(int i = 0; i < 1; i++){
        HitInfo res = intersectSphere(ray, spheres[i]);
       if(res.t>0 && res.t < hit.t) {
          hit = res;
       }
    }
    return hit.t < t;
}


bool closestIntersection(Ray ray, inout HitInfo hit){
    float t = hit.t;
//    closestIntersectingSphere(ray, hit);
    closestIntersectingPlane(ray, hit);

    return hit.t < t;
}

void main()
{
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    imageStore(scene_img, pos, bgColor);
	
	float t = 10000;
	
	vec2 uv = getUV();
	setup_camera(uv);

	vec2 tNearFar = intersectCube(eyeRay.origin, eyeRay.dir,  aabb);
    HitInfo hit;
	if(tNearFar.x<tNearFar.y  ) {

		t = tNearFar.y+1; //offset the near intersection to remove the depth artifacts

		hit.t = t;
		bool intersectFound = closestIntersection(eyeRay, hit);
		
		if(intersectFound) {
         //   N = normalize( N * (1 - val.y - val.z) + N * val.y + N * val.z);
			vec3 L = (lightPos-hit.p);
			float d = length(L);
			L = normalize(L);

			float diffuse = max(0, dot(hit.n, L));

			float attenuationAmount = 1.0/(k0 + (k1*d) + (k2*d*d));
			diffuse *= attenuationAmount;

			float inShadow = shadow(hit.p + hit.n*0.0001, L) ;
		//	vec4 color = inShadow * diffuse*mix(texture(textureMap, vec3(hit.u, hit.v, hit.tid)), vec4(1), (hit.tid==255) );
			vec4 color = diffuse * hit.mat;

            imageStore(scene_img, pos, color);
            if(hit.t1 == 255) imageStore(scene_img, pos, vec4(1, 1, 0, 1));
		}

	}
	//vec4 color = spheres[0].mat;
	//imageStore(scene_img, pos, color);
}

