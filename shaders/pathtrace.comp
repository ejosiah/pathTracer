#version 450 core
#pragma debug(on)
#pragma optimize(off)

layout(local_size_x = 32, local_size_y = 32) in;

struct Material {
    vec4 ambient;
    vec4 diffuse;
    vec4 specular;
    vec4 transmittance;
    vec4 emission;
    float shininess;
    float ior;
    float opacity;
};

struct Triangle{
    vec3 v0, v1, v2;
    Material material;
    float tid;
};

struct Sphere {
	vec3 center;
	float radius;
	Material material;
};

struct Box { 
	vec3 min;
	vec3 max; 
	Material material;
};

struct Ray { vec3 origin, dir;} eyeRay;
struct Camera{
	vec3 U, V, W;
	float d;
} cam;

layout(std430, binding=4) buffer TRIANGLES_SSBO{
    Triangle triangles[38];
};

uniform mat4 invMVP;
uniform vec4 bgColor;
uniform vec3 eyes;
uniform vec3 lightPos;
uniform Box aabb;
uniform float NO_OF_TRIANGLES;
uniform float NO_OF_VERTICES;
uniform float seed;
uniform int SAMPLES;

layout(rgba32f, binding=0) uniform image2D scene_img;
layout(binding=1) uniform samplerBuffer vertices_tbo;
layout(binding=2) uniform isamplerBuffer triangle_tbo;
layout(binding=3) uniform sampler2DArray textureMap;

const float k0 = 1.0;
const float k1 = 0.0;
const float k2 = 0.0;
const vec4 NO_HIT = vec4(-1, 0, 0, 0);

vec2 getUV(){
	vec2 uv = vec2(gl_GlobalInvocationID.xy)/(vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy) - vec2(1));
	return 2 * uv - vec2(1);	// scale from [0, 1] to [-1, -1]
}

float random(vec3 scale, float seed) {		
	return fract(sin(dot(gl_GlobalInvocationID.xyz + seed, scale)) * 43758.5453 + seed);	
}	

vec3 uniformlyRandomDirection(float seed) {		
	float u = random(vec3(12.9898, 78.233, 151.7182), seed);		
	float v = random(vec3(63.7264, 10.873, 623.6736), seed);		
	float z = 1.0 - 2.0 * u;		
	float r = sqrt(1.0 - z * z);	
	float angle = 6.283185307179586 * v;	
	return vec3(r * cos(angle), r * sin(angle), z);	
}	

vec3 uniformlyRandomVector(float seed) {		
	return uniformlyRandomDirection(seed) *  (random(vec3(36.7539, 50.3658, 306.2759), seed));	
}

vec2 intersectCube(vec3 origin, vec3 ray, Box cube) {
	vec3   tMin = (cube.min - origin) / ray;
	vec3   tMax = (cube.max - origin) / ray;
	vec3     t1 = min(tMin, tMax);
	vec3     t2 = max(tMin, tMax);
	float tNear = max(max(t1.x, t1.y), t1.z);
	float  tFar = min(min(t2.x, t2.y), t2.z);
	return vec2(tNear, tFar);
}

vec3 get_direction(vec2 p, Camera c) {
   return normalize(p.x * c.U + p.y * c.V + c.d * c.W);
}

void setup_camera(vec2 uv) {

  eyeRay.origin = eyes;

  cam.U = (invMVP*vec4(1,0,0,0)).xyz;
  cam.V = (invMVP*vec4(0,1,0,0)).xyz;
  cam.W = (invMVP*vec4(0,0,1,0)).xyz;
  cam.d = 1;

  eyeRay.dir = get_direction(uv , cam);
  eyeRay.dir += cam.U*uv.x;
  eyeRay.dir += cam.V*uv.y;
}


vec4 intersectTriangle(vec3 origin, vec3 dir, int index,  out vec3 normal ) {
    Triangle tri = triangles[index];
    vec3 v0 = tri.v2.xyz;
    vec3 v1 = tri.v1.xyz;
    vec3 v2 = tri.v0.xyz;

	if((index+1) % 2 !=0 ){
	    v0 = tri.v1.xyz;
        v1 = tri.v0.xyz;
        v2 = tri.v2.xyz;
	}

	vec3 e1 = v1-v0;
	vec3 e2 = v2-v0;
	vec3 tvec = origin - v0;

	vec3 pvec = cross(dir, e2);
	float  det  = dot(e1, pvec);

	float inv_det = 1.0/ det;

	float u = dot(tvec, pvec) * inv_det;

	if (u < 0.0 || u > 1.0)
		return NO_HIT;

	vec3 qvec = cross(tvec, e1);

	float v = dot(dir, qvec) * inv_det;

	if (v < 0.0 || (u + v) > 1.0)
		return NO_HIT;

	float t = dot(e2, qvec) * inv_det;
	if((index+1) % 2 ==0 ) {
		v = 1-v; 
	} else {
		u = 1-u;
	} 
	normal = normalize(cross(e2,e1));
	return vec4(t,u,v, tri.tid);
}

float shadow(vec3 origin, vec3 dir ) {
	vec3 tmp;
	for(int i=0;i<int(NO_OF_TRIANGLES);i++)
	{
		vec4 res = intersectTriangle(origin, dir, i, tmp);
		if(res.x>0 ) {
		   return 0.5;
		}
	}
	return 1.0;
}

vec3 tracepath(vec3 origin, vec3 ray, vec3 light, float t){
	vec3 colorMask = vec3(1);
	vec3 accumulatedColor = vec3(0);
	vec3 surfaceColor = vec3(bgColor);

	float diffuse = 1;

	for(int bounce = 0; bounce < SAMPLES; bounce++){
		vec2 tNearfar = intersectCube(origin, ray, aabb);
		if(tNearfar.x > tNearfar.y) continue;

		if(tNearfar.y < t) t = tNearfar.y + 1;

		vec3 N;
		vec4 val = vec4(t, 0, 0, 0);

		for(int i = 0; i < NO_OF_TRIANGLES; i++){
			vec3 normal;
			vec4 res = intersectTriangle(origin, ray, i, normal);
			if(res.x > 0.001 && res.x < val.x){
				val = res;

				N = normal;
			}
		}

		if(val.x < t){
			surfaceColor = mix(texture(textureMap, val.yzw), vec4(1), (val.w==255) ).xyz;

			vec3 hit = origin + ray * val.x;
			origin = hit;
		//	if(val.w== 255){
		//	    ray = normalize(reflect(ray, N));
		//	}else{
			    ray = uniformlyRandomDirection(seed + float(bounce));
		//	}

			vec3 jitteredLight = light + ray;
			vec3 L = normalize(jitteredLight - hit);

			diffuse = max(0, dot(L, N));
			colorMask *= surfaceColor;

			float inShadow = shadow(hit + N * 0.0001, L);

			accumulatedColor += colorMask * diffuse * inShadow;
		}
	}

	if(accumulatedColor == vec3(0)){	// no geometry intersect
		return surfaceColor * diffuse;
	}else{
		return accumulatedColor / float(SAMPLES - 1);
	}
}

void main()
{
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    imageStore(scene_img, pos, bgColor);
	
	float t = 10000;
	
	vec2 uv = getUV();
	setup_camera(uv);

	vec2 tNearFar = intersectCube(eyeRay.origin, eyeRay.dir, aabb);

	if(tNearFar.x < tNearFar.y){
		t = tNearFar.y + 1;
		vec3 light = lightPos + uniformlyRandomVector(seed);

		vec3 color = tracepath(eyeRay.origin, eyeRay.dir, light, t);

		imageStore(scene_img, pos, vec4(color, 1));
	}
}

