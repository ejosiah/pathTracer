#version 450 core
#pragma debug(on)
#pragma optimize(off)

layout(local_size_x = 32, local_size_y = 32) in;

#define PI                    3.1415926535897932384626422832795028841971
#define TWO_PI				  6.2831853071795864769252867665590057683943
#define SQRT_OF_ONE_THIRD     0.5773502691896257645091487805019574556476

#define SPHERE 0
#define PLANE 1
#define TRIANGLE 2

struct Material {
    vec4 ambient;
    vec4 diffuse;
    vec4 specular;
    vec4 transmittance;
    vec4 emission;
    float shininess;
    float ior;
    float opacity;
	float f0;
};

struct HitInfo{
    vec3 p;
    vec3 n;
    float t;
    float t1;
    float u;
    float v;
    float tid;
    int i;
    int type;
    bool isLight;
    Material mat;
};

struct Sphere{
    vec3 center;
    vec4 ambient;
    vec4 diffuse;
    vec4 specular;
    vec4 transmittance;
    vec4 emission;
    float shininess;
    float ior;
    float opacity;
	float f0;
    float radius;
};

struct Plane{
    vec3 n;
    vec4 ambient;
    vec4 diffuse;
    vec4 specular;
    vec4 transmittance;
    vec4 emission;
    float shininess;
    float ior;
    float opacity;
	float f0;
	float d;
};

struct Triangle{
    vec3 v0, v1, v2;
    Material material;
    float tid;
};

struct Ray { vec3 origin, dir;} eyeRay;
struct Box { vec3 min, max; };
struct Camera{
	vec3 U, V, W;
	float d;
} cam;

const int NO_SPHERES = 5;
layout(std430, binding=0) buffer TRIANGLES_SSBO{
    Triangle triangles[38];
};

layout(std430, binding=1) buffer PLANE_SSBO{
    Plane planes[5];
};

layout(std430, binding=2) buffer SPHERE_SSBO{
    Sphere spheres[NO_SPHERES];
};


uniform mat4 invMVP;
uniform vec4 bgColor;
uniform vec3 eyes;
uniform vec3 lightPos;
uniform Box aabb;
uniform float NO_OF_TRIANGLES;
uniform float NO_OF_VERTICES;
uniform float seed;

layout(rgba32f, binding=0) uniform image2D scene_img;
layout(binding=1) uniform samplerBuffer vertices_tbo;
layout(binding=2) uniform isamplerBuffer triangle_tbo;
layout(binding=3) uniform sampler2DArray textureMap;

const float k0 = 1.0;
const float k1 = 0.0;
const float k2 = 0.0;
const float EPSILON = 0.000001;
const vec3 globalAmb = vec3(0.02, 0.02, 0.02);
const int iterations = 5;

struct Light{
    vec3 pos;
    vec3 color;
};

float random(vec3 scale, float seed) {
	return fract(sin(dot(gl_GlobalInvocationID.xyz + seed, scale)) * 43758.5453 + seed);
}

HitInfo newHitInfo(float t){
    HitInfo info;
    info.t = t;
    info.t = info.u = info.v = 0;
    return info;
}

HitInfo newHitInfo(float t, float u, float v, float tid, vec3 n, vec3 o, vec3 d){
    HitInfo info;
    info.t = t;
    info.u = u;
    info.v = v;
    info.tid = tid;
    info.n = n;
    info.p =  o + t * d;
    return info;
}

const HitInfo NO_HIT = newHitInfo(-1);
HitInfo possibleHit;

float Fresnel(vec3 N, vec3 V, float f0){
    float cosX = clamp(dot(N, V), 0.0, 1.0);
    float x = 1.0 - cosX;
    return f0 + (1.0 - f0) * pow(x, 5);
}

vec2 getUV(){
	vec2 uv = vec2(gl_GlobalInvocationID.xy)/(vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy) - vec2(1));
	return 2 * uv - vec2(1);	// scale from [0, 1] to [-1, -1]
}

void swap(inout float a, inout float b){
	float temp = a;
	a = b;
	b = temp;
}

void swap(inout vec3 a, inout vec3 b){
	vec3 temp = a;
	a = b;
	b = temp;
}


void intersectPlane(Ray ray, Plane p, out HitInfo hit){
	hit.t = -1;
	vec3 o = ray.origin;
	vec3 d = ray.dir;
	hit.t = (p.d - dot(p.n, o)) / dot(p.n, d);
}

void intersectSphere(Ray ray, Sphere s, out HitInfo hit){
    hit.t = -1;
    vec3 m = ray.origin - s.center;
    float b = dot(m, ray.dir);
    float c = dot(m, m) - s.radius * s.radius;

    if(c > 0.0f && b > 0.0f) return;

    float discr = b*b - c;

    if(discr < 0.0f) return;

   // if(t < 0.0f) t = 0.0f;   // ray started inside sphere*/
    hit.t = -b - sqrt(discr);
    hit.t1 = hit.t + 2 * b;
}

vec2 intersectCube(vec3 origin, vec3 ray, Box cube) {
	vec3   tMin = (cube.min - origin) / ray;
	vec3   tMax = (cube.max - origin) / ray;
	vec3     t1 = min(tMin, tMax);
	vec3     t2 = max(tMin, tMax);
	float tNear = max(max(t1.x, t1.y), t1.z);
	float  tFar = min(min(t2.x, t2.y), t2.z);
	return vec2(tNear, tFar);
}

vec3 get_direction(vec2 p, Camera c) {
   return normalize(p.x * c.U + p.y * c.V + c.d * c.W);
}

void setup_camera(vec2 uv) {

  eyeRay.origin = eyes;

  cam.U = (invMVP*vec4(1,0,0,0)).xyz;
  cam.V = (invMVP*vec4(0,1,0,0)).xyz;
  cam.W = (invMVP*vec4(0,0,1,0)).xyz;
  cam.d = 1;

  eyeRay.dir = get_direction(uv , cam);
  eyeRay.dir += cam.U*uv.x;
  eyeRay.dir += cam.V*uv.y;
  eyeRay.dir = normalize(eyeRay.dir);
}


HitInfo intersectTriangle(vec3 origin, vec3 dir, int index ) {
    Triangle tri = triangles[index];
    vec3 v0 = tri.v2;
    vec3 v1 = tri.v1;
    vec3 v2 = tri.v0;

	if((index+1) % 2 !=0 ){
	    v0 = tri.v1;
        v1 = tri.v0;
        v2 = tri.v2;
	}

	vec3 e1 = v1-v0;
	vec3 e2 = v2-v0;
	vec3 tvec = origin - v0;

	vec3 pvec = cross(dir, e2);
	float  det  = dot(e1, pvec);

	float inv_det = 1.0/ det;

	float u = dot(tvec, pvec) * inv_det;

	if (u < 0.0 || u > 1.0)
		return NO_HIT;

	vec3 qvec = cross(tvec, e1);

	float v = dot(dir, qvec) * inv_det;

	if (v < 0.0 || (u + v) > 1.0)
		return NO_HIT;

	float t = dot(e2, qvec) * inv_det;
	if((index+1) % 2 ==0 ) {
		v = 1-v; 
	} else {
		u = 1-u;
	} 

	return newHitInfo(t, u, v, tri.tid, normalize(cross(e2,e1)), origin, dir);
}

bool closestIntersectingTriangle(Ray ray, inout HitInfo hit){
    float t = hit.t;
    for(int i=0;i<int(NO_OF_TRIANGLES);i++)
    {
        HitInfo res = intersectTriangle(ray.origin, ray.dir, i);
        if(res.t>0 && res.t <= hit.t) {
           hit = res;

        }
    }
    return hit.t < t;
}

bool closestIntersectingPlane(Ray ray, inout HitInfo hit){
    float t = hit.t;
    possibleHit.t = t;
    for(int i = 0; i < 5; i++){
        intersectPlane(ray, planes[i], possibleHit);
       if(possibleHit.t>0 && possibleHit.t <= hit.t) {
          hit = possibleHit;
          hit.i = i;
          hit.type = PLANE;

       }
    }
    return hit.t < t;
}

bool closestIntersectingSphere(Ray ray, inout HitInfo hit){
    float t = hit.t;
    possibleHit.t = t;
    for(int i = 0; i < NO_SPHERES; i++){
        intersectSphere(ray, spheres[i], possibleHit);
       if(possibleHit.t>0 && possibleHit.t < hit.t) {
          hit = possibleHit;
          hit.i = i;
          hit.type = SPHERE;
       }
    }
    return hit.t < t;
}


bool closestIntersection(Ray ray, inout HitInfo hit){
    float t = hit.t;
    closestIntersectingSphere(ray, hit);
    closestIntersectingPlane(ray, hit);

    if(hit.t < t){
        switch(hit.type){
        case PLANE:
            Plane p = planes[hit.i];
            hit.p = ray.origin + hit.t * ray.dir;
            hit.n = p.n;
            hit.mat.ambient = p.ambient;
            hit.mat.diffuse = p.diffuse;
            hit.mat.specular = p.specular;
            hit.mat.transmittance = p.transmittance;
            hit.mat.emission = p.emission;
            hit.mat.shininess = p.shininess;
            hit.mat.ior = p.ior;
            hit.mat.f0 = p.f0;
            break;
        case SPHERE:
            Sphere s = spheres[hit.i];
            hit.p = ray.origin + hit.t * ray.dir;
            hit.n = normalize(hit.p - s.center);
            hit.mat.ambient = s.ambient;
            hit.mat.diffuse = s.diffuse;
            hit.mat.specular = s.specular;
            hit.mat.transmittance = s.transmittance;
            hit.mat.emission = s.emission;
            hit.mat.shininess = s.shininess;
            hit.mat.f0 = s.f0;
            hit.mat.ior = s.ior;
            break;
        }
        return true;
    }
    return false;
}

bool intersectsAny(Ray ray, float t){
    possibleHit.t = t;
    for(int i = 2; i < NO_SPHERES; i++){
       intersectSphere(ray, spheres[i], possibleHit);
       if(possibleHit.t > 0 && possibleHit.t < t) {
          return true;
       }

    }
    return false;

}

float shadow(Ray ray, float t) {
	if(intersectsAny(ray, t)){
	    return 0.7;
	}
	return 1.0;
}

//vec3 shade0(HitInfo hit, Light l, vec3 E){
//    vec3 L = l.pos - hit.p;
//    float d = length(L);
//    vec3 N = normalize(hit.n);
//    L = normalize(L);
//    vec3 H = normalize(E + L);
//
//    float attenuation = 1/(k0 + (k1*d) + (k2 * d * d));
//    vec3 I = l.color;
//    vec3 amb = hit.mat.ambient.rgb * I;
//    vec3 diff = I * hit.mat.diffuse.rgb * clamp(dot(N, L), 0.0, 1.0);
//    vec3 spec = I * hit.mat.specular.rgb * pow(clamp(dot(H, N), 0.0, 1.0), hit.mat.shininess);
//    vec3 emis = hit.mat.emission.rgb;
//
//    return  attenuation * (diff + spec );
//}


vec3 shade0(HitInfo hit, Light l, vec3 E){
    vec3 L = l.pos - hit.p;
    float d = length(L);
    vec3 N = hit.n;
    L = normalize(L);
    vec3 H = normalize(E + L);

    float attenuation = 1/(k0 + (k1*d) + (k2 * d * d));
    vec3 I = l.color;
    vec3 amb = hit.mat.ambient.rgb;
    float cos0 = clamp(dot(N, L), 0.0, 1.0);
    vec3 spec = hit.mat.specular.rgb;

    return attenuation * (amb * I + I * cos0 * spec);
}

vec4 shade(HitInfo hit, Ray ray){
    vec3 color = vec3(0);
    if(length(hit.mat.emission.rgb) > 0){
        return hit.mat.emission;
    }
    for(int i = 0; i < 2; i++){
      Sphere s = spheres[i];
      Light l;
      l.color = s.emission.xyz;
      l.pos = s.center;
      color += shade0(hit, l, -ray.dir);
      Ray ray;
      ray.origin = hit.p;
      vec3 L = l.pos - hit.p;
      ray.dir = normalize(L);
      float inShadow = shadow(ray, length(L));
      color *= inShadow;
    }
    return vec4(color, 1.0);
}

vec3 reflectColor(Ray ray){
    float t = 1000;
    vec4 color = vec4(0);
    vec2 tNearFar = intersectCube(ray.origin, ray.dir,  aabb);
    HitInfo hit;
    if(tNearFar.x<tNearFar.y){
        t = tNearFar.y+1;
        hit.t = t;
        bool intersectFound = closestIntersection(ray, hit);
        if(intersectFound){
            color = shade(hit, ray);
        }
    }
    return color.xyz;
}

vec4 tracepath(Ray source, float t){
	vec3 mask = vec3(1);
	vec3 color = vec3(0);
	vec3 refCol;
    Ray ray;
    ray.origin = source.origin;
    ray.dir = source.dir;
    Ray refRay;
    vec2 range = vec2(0, 1);
    float fresnel;
	for(int i = 0; i < iterations; i++){
		vec2 tNearFar = intersectCube(ray.origin, ray.dir,  aabb);
		HitInfo hit;
		if(tNearFar.x<tNearFar.y  ) {

			t = tNearFar.y+1;

			hit.t = t;
			bool intersectFound = closestIntersection(ray, hit);

			if(intersectFound) {
			    fresnel = Fresnel(hit.n, -ray.dir, hit.mat.f0);
			    mask *= fresnel;
				if(hit.mat.ior > 0){
                   refRay.origin = hit.p - hit.n;
                   refRay.dir = reflect(ray.dir, hit.n);
                   refCol = reflectColor(refRay);
                   color += refCol  * mask;
                   mask = hit.mat.diffuse.rgb * (1.0 - fresnel) * (mask / fresnel);
                   ray.origin = refRay.origin;
                   ray.dir = refract(ray.dir, hit.n, hit.mat.ior);
				}
				else if(hit.mat.f0 > 0){
                    color += shade(hit, ray).xyz * (1.0 - fresnel) * mask / fresnel;
                    ray.origin = hit.p + hit.n;
                    ray.dir = reflect(ray.dir, hit.n);
				}else{
                    color += shade(hit, ray).rgb * mask/fresnel;
                    break;
				}
			}

	    }
	}
	return vec4(color, 1.0);

}

void main()
{
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    imageStore(scene_img, pos, bgColor);
	
	float t = 10000;
	
	vec2 uv = getUV();
	setup_camera(uv);

	vec2 tNearFar = intersectCube(eyeRay.origin, eyeRay.dir,  aabb);
    HitInfo hit;
	if(tNearFar.x<tNearFar.y  ) {

		t = tNearFar.y+1;

//		hit.t = t;
//		bool intersectFound = closestIntersection(eyeRay, hit);
//
//		if(intersectFound) {
//			vec4 color = shade(hit);
//            imageStore(scene_img, pos, color);
//		}
		vec4 color = tracepath(eyeRay, t);
        imageStore(scene_img, pos, color);
	}

}

